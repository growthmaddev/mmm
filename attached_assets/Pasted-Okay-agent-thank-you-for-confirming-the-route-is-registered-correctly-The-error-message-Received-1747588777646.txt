Okay, agent, thank you for confirming the route is registered correctly. The error message 'Received invalid data from the server' is a very strong clue. It means the frontend (budget-optimizer.tsx) made a request to the backend /api/models/:modelId/optimize-budget endpoint, received a response, but couldn't understand or use that response.

This strongly suggests the issue lies in what the server/controllers/budgetOptimization.ts controller is actually sending back, or how it's processing the data internally.

Let's focus on debugging server/controllers/budgetOptimization.ts. Please do the following:

Step 1: Log the Input Data within the Controller:

Inside the optimizeBudget function in server/controllers/budgetOptimization.ts, at the very beginning, please add console.log() statements to print:
The modelId received.
The current_budget, desired_budget, and current_allocation received in the request body.
Crucially, after fetching the model from the database (const model = await storage.getModelById(modelId);), log the entire model.results object that you are planning to use for the optimization. We need to see its exact structure as retrieved inside the controller.
Step 2: Log the Calculated Optimization Output Before Sending:

Just before the res.json(...) or res.send(...) statement that sends the response back to the frontend, add console.log() statements to print the exact optimization results object that the controller has constructed and is about to send.
Step 3: Trigger the Optimization and Show Logs:

Now, trigger the budget optimization again from the frontend UI (using Model ID 14 and some sample budget inputs).
Then, please show me the complete server-side console logs that were generated by the console.log() statements you added in Step 1 and Step 2 during this request.
Step 4: (If possible) Show the curl Output Again:

If it's easy to do, also re-run the curl command you used previously to hit the /api/models/14/optimize-budget endpoint and show the exact JSON response body it returns now, after any recent fixes you've made to the controller.
What we are looking for:

Is model.results being loaded correctly inside the controller? Is it the full, rich JSON we expect from train_mmm.py, or is it incomplete, null, or misparsed at this stage?
Is the optimization logic (using ROIs or other parameters from model.results) producing a sensible intermediate result within the controller?
What is the exact structure of the object the controller intends to send as a response? Does this structure align with what budget-optimizer.tsx is expecting to receive and parse? (We might need to look at the frontend's parsing logic next, but let's confirm the backend output first).
By logging the data at these key points within the controller, we can see if the problem is due to incorrect data being used for the optimization, an error in the optimization calculation itself, or an issue with how the final response to the frontend is being constructed.

Let's see those server-side logs from the budgetOptimization.ts controller when you trigger the optimization. This detailed tracing is essential now.